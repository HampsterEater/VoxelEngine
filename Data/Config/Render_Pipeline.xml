<xml>	
	<defaults>

		<state>
			<clear-color-value>0,0,0,0</clear-color-value>
			<clear-depth-value>1</clear-depth-value>
			<depth-function>lower_or_equal</depth-function>
			<cull-face>back</cull-face>
			<depth-test>true</depth-test>
			<alpha-test>false</alpha-test>
			<blend>false</blend>
		</state>
		
	</defaults>
	<meshes>
	
		<!-- Used to render a quad covering the entire screen -->
		<mesh name="fullscreen_quad">
			<primative>quads</primative>
			<vertices>
				-1, -1, 0,
				 1, -1, 0,
				 1,  1, 0,
				-1,  1, 0
			</vertices>
			<normals>
				 0, 0, 0,
				 0, 0, 0,
				 0, 0, 0,
				 0, 0, 0
			</normals>
			<texture-coordinates>
				 0, 0,
				 1, 0,
				 1, 1,
				 0, 1
			</texture-coordinates>
		</mesh>

	</meshes>
	<textures>
	
		<!-- Render target textures -->
		<texture name="diffuse" 			format="R8G8B8A8" 		  width="DISPLAY_WIDTH" height="DISPLAY_HEIGHT" flags="" />
		<texture name="normal"  			format="R32FG32FB32FA32F" width="DISPLAY_WIDTH" height="DISPLAY_HEIGHT" flags="" />
		<texture name="light_accumulation" 	format="R32FG32FB32FA32F" width="DISPLAY_WIDTH" height="DISPLAY_HEIGHT" flags="" />
		<texture name="shadow_map"			format="R32FG32FB32FA32F" width="DISPLAY_WIDTH" height="DISPLAY_HEIGHT" flags="" />
		<texture name="shadow_accumulation" format="R32FG32FB32FA32F" width="DISPLAY_WIDTH" height="DISPLAY_HEIGHT" flags="" />
		<texture name="material" 			format="R8G8B8A8" 		  width="DISPLAY_WIDTH" height="DISPLAY_HEIGHT" flags="" />
		<texture name="ssao" 				format="R32FG32FB32FA32F" width="DISPLAY_WIDTH" height="DISPLAY_HEIGHT" flags="" />
		<texture name="position" 			format="R32FG32FB32FA32F" width="DISPLAY_WIDTH" height="DISPLAY_HEIGHT" flags="" />
		<texture name="depth"	  			format="DepthFormat" 	  width="DISPLAY_WIDTH" height="DISPLAY_HEIGHT" flags="" />

		<!-- External file textures -->
		<texture name="noise"	  			file="Data/Textures/Shaders/noise.png" flags="AllowRepeat" />	
	
	</textures>	
	<targets>
	
		<!-- Gbuffer stores all the information neccessary for deferred shading -->
		<target name="gbuffer">
			<attached-texture name="diffuse"				type="color" />
			<attached-texture name="normal" 				type="color" />
			<attached-texture name="light_accumulation" 	type="color" />
			<attached-texture name="shadow_map"			 	type="color" />
			<attached-texture name="shadow_accumulation" 	type="color" />
			<attached-texture name="material" 				type="color" />
			<attached-texture name="ssao" 					type="color" />
			<attached-texture name="position" 				type="color" />
			<attached-texture name="depth" 					type="depth" />
		</target>
		
	</targets>
	<shaders>
	
		<!-- Shaders for each pass -->
		<shader name="gbuffer">
			<vertex>Data/Shaders/gbuffer.vert</vertex>
			<fragment>Data/Shaders/gbuffer.frag</fragment>
			<uniforms>
				<uniform name="g_texture" 						type="texture" 	value="MATERIAL_TEXTURE" />
				<uniform name="g_world_view_matrix" 			type="matrix4" 	value="WORLD_VIEW_MATRIX" />
				<uniform name="g_world_view_projection_matrix" 	type="matrix4" 	value="WORLD_VIEW_PROJECTION_MATRIX" />
				<uniform name="g_camera_near_clip" 				type="float" 	value="CAMERA_NEAR_CLIP" />
				<uniform name="g_camera_far_clip" 				type="float" 	value="CAMERA_FAR_CLIP" />
				<uniform name="g_material_shininess" 			type="float" 	value="MATERIAL_SHININESS" />
				<uniform name="g_material_specular" 			type="vector3" 	value="MATERIAL_SPECULAR" />
			</uniforms>
		</shader>
		<shader name="solid_color_gbuffer">
			<vertex>Data/Shaders/solid_color_gbuffer.vert</vertex>
			<fragment>Data/Shaders/solid_color_gbuffer.frag</fragment>
			<uniforms>
				<uniform name="g_world_view_matrix" 			type="matrix4" 	value="WORLD_VIEW_MATRIX" />
				<uniform name="g_world_view_projection_matrix" 	type="matrix4" 	value="WORLD_VIEW_PROJECTION_MATRIX" />
				<uniform name="g_camera_near_clip" 				type="float" 	value="CAMERA_NEAR_CLIP" />
				<uniform name="g_camera_far_clip" 				type="float" 	value="CAMERA_FAR_CLIP" />
				<uniform name="g_material_shininess" 			type="float" 	value="MATERIAL_SHININESS" />
				<uniform name="g_material_specular" 			type="vector3" 	value="MATERIAL_SPECULAR" />
			</uniforms>
		</shader>
		<shader name="screen_quad">
			<vertex>Data/Shaders/screen_quad.vert</vertex>
			<fragment>Data/Shaders/screen_quad.frag</fragment>
			<uniforms>
				<uniform name="g_texture" 								type="texture" value="MATERIAL_TEXTURE" />
			</uniforms>
		</shader>
		<shader name="solid_quad">
			<vertex>Data/Shaders/solid_quad.vert</vertex>
			<fragment>Data/Shaders/solid_quad.frag</fragment>
			<uniforms>
				<uniform name="g_world_view_projection_matrix" 			type="matrix4" 	value="WORLD_VIEW_PROJECTION_MATRIX" />
			</uniforms>
		</shader>
		<shader name="ui_element">
			<vertex>Data/Shaders/ui_element.vert</vertex>
			<fragment>Data/Shaders/ui_element.frag</fragment>
			<uniforms>
				<!--
				<uniform name="g_texture" 			type="texture" value="MATERIAL_TEXTURE" />
				-->
				<uniform name="g_world_view_projection_matrix" 			type="matrix4" 	value="WORLD_VIEW_PROJECTION_MATRIX" />
			</uniforms>
		</shader>
		<shader name="ssao">
			<vertex>Data/Shaders/ssao.vert</vertex>
			<fragment>Data/Shaders/ssao.frag</fragment>
			<uniforms>	
				<uniform name="g_diffuse" 				type="texture" value="diffuse" />
				<uniform name="g_depth" 				type="texture" value="depth" />
				<uniform name="g_normal" 				type="texture" value="normal" />
				<uniform name="g_material" 				type="texture" value="material" />
				<uniform name="g_noise" 				type="texture" value="noise" />
				<uniform name="g_position" 				type="texture" value="position" />
				<uniform name="g_resolution" 			type="vector3" value="RESOLUTION" />
				<uniform name="g_noise_texture_size" 	type="vector3" value="TEXTURE_SIZE" texture="noise" />
			</uniforms>
		</shader>
		<shader name="combine">
			<vertex>Data/Shaders/combine.vert</vertex>
			<fragment>Data/Shaders/combine.frag</fragment>
			<uniforms>
				<uniform name="g_depth" 			  type="texture" value="depth" />
				<uniform name="g_diffuse" 			  type="texture" value="diffuse" />
				<uniform name="g_light_accumulation"  type="texture" value="light_accumulation" />
				<uniform name="g_shadow_accumulation" type="texture" value="shadow_accumulation" />
				<uniform name="g_shadow_map" 		  type="texture" value="shadow_map" />
				<uniform name="g_position" 			  type="texture" value="position" />
				<uniform name="g_ssao"				  type="texture" value="ssao" />
				<uniform name="g_position" 			  type="texture" value="position" />
			</uniforms>
		</shader>
		<shader name="light">
			<vertex>Data/Shaders/light.vert</vertex>
			<fragment>Data/Shaders/light.frag</fragment>
			<uniforms>
				<uniform name="g_position" 				type="texture" 	value="position" />
				<uniform name="g_depth" 				type="texture" 	value="depth" />
				<uniform name="g_normal" 				type="texture" 	value="normal" />
				<uniform name="g_material" 				type="texture" 	value="material" />
				<uniform name="g_light_position" 		type="vector4" 	value="LIGHT_POSITION" />
				<uniform name="g_light_direction"	 	type="vector4" 	value="LIGHT_DIRECTION" />
				<uniform name="g_light_outer_radius" 	type="float" 	value="LIGHT_OUTER_RADIUS" />
				<uniform name="g_light_color" 			type="vector4" 	value="LIGHT_COLOR" />
				<uniform name="g_light_radius" 			type="float" 	value="LIGHT_RADIUS" />
				<uniform name="g_light_type" 			type="int" 		value="LIGHT_TYPE" />
			</uniforms>
		</shader>
		<shader name="shadow_map">
			<vertex>Data/Shaders/shadow_map.vert</vertex>
			<fragment>Data/Shaders/shadow_map.frag</fragment>
			<uniforms>
				<uniform name="g_position" 								type="texture" 	value="position" />
				<uniform name="g_depth" 								type="texture" 	value="depth" />
				<uniform name="g_normal" 								type="texture" 	value="normal" />
				<uniform name="g_material" 								type="texture" 	value="material" />
				<uniform name="g_light_view_matrix" 					type="matrix4" 	value="LIGHT_VIEW_MATRIX" />
				<uniform name="g_light_world_view_projection_matrix" 	type="matrix4" 	value="LIGHT_WORLD_VIEW_PROJECTION_MATRIX" />
				<uniform name="g_light_position" 						type="vector4" 	value="LIGHT_POSITION" />
				<uniform name="g_light_direction"	 					type="vector4" 	value="LIGHT_DIRECTION" />
				<uniform name="g_light_outer_radius" 					type="float" 	value="LIGHT_OUTER_RADIUS" />
				<uniform name="g_light_color" 							type="vector4" 	value="LIGHT_COLOR" />
				<uniform name="g_light_radius" 							type="float" 	value="LIGHT_RADIUS" />
				<uniform name="g_light_type" 							type="int" 		value="LIGHT_TYPE" />
			</uniforms>
		</shader>
		<shader name="shadow_accumulation">
			<vertex>Data/Shaders/shadow_accumulation.vert</vertex>
			<fragment>Data/Shaders/shadow_accumulation.frag</fragment>
			<uniforms>
				<uniform name="g_position" 								type="texture" 	value="position" />
				<uniform name="g_depth" 								type="texture" 	value="depth" />
				<uniform name="g_normal" 								type="texture" 	value="normal" />
				<uniform name="g_material" 								type="texture" 	value="material" />
				<uniform name="g_shadow_map" 							type="texture" 	value="shadow_map" />				
				<uniform name="g_light_view_matrix" 					type="matrix4" 	value="LIGHT_VIEW_MATRIX" />
				<uniform name="g_light_world_view_projection_matrix" 	type="matrix4" 	value="LIGHT_WORLD_VIEW_PROJECTION_MATRIX" />
				<uniform name="g_light_position" 						type="vector4" 	value="LIGHT_POSITION" />
				<uniform name="g_light_direction"	 					type="vector4" 	value="LIGHT_DIRECTION" />
				<uniform name="g_light_outer_radius" 					type="float" 	value="LIGHT_OUTER_RADIUS" />
				<uniform name="g_light_color" 							type="vector4" 	value="LIGHT_COLOR" />
				<uniform name="g_light_radius" 							type="float" 	value="LIGHT_RADIUS" />
				<uniform name="g_light_type" 							type="int" 		value="LIGHT_TYPE" />
				<uniform name="g_world_view_matrix" 					type="matrix4" 	value="WORLD_VIEW_MATRIX" />
				<uniform name="g_inverse_world_view_matrix" 			type="matrix4" 	value="INVERSE_WORLD_VIEW_MATRIX" />
				<uniform name="g_inverse_world_view_projection_matrix" 	type="matrix4" 	value="INVERSE_WORLD_VIEW_PROJECTION_MATRIX" />
				<uniform name="g_world_view_projection_matrix" 			type="matrix4" 	value="WORLD_VIEW_PROJECTION_MATRIX" />
				<uniform name="g_camera_near_clip" 						type="float" 	value="CAMERA_NEAR_CLIP" />
				<uniform name="g_camera_far_clip" 						type="float" 	value="CAMERA_FAR_CLIP" />
			</uniforms>
		</shader>
		<shader name="distance_field_font">
			<vertex>Data/Shaders/distance_field_font.vert</vertex>
			<fragment>Data/Shaders/distance_field_font.frag</fragment>
			<uniforms>
				<uniform name="g_world_view_projection_matrix" 			type="matrix4" 	value="WORLD_VIEW_PROJECTION_MATRIX" />
			</uniforms>
		</shader>
		
	</shaders>
	<slots>
	
		<slot name="geometry">
			<shader>gbuffer</shader>
			<sort>front_to_back</sort>
			<passes>geometry</passes>
		</slot>
		
		<slot name="solid_color_editor_geometry">
			<shader>solid_color_gbuffer</shader>
			<sort>none</sort>
			<passes>editor-geometry</passes>
		</slot>
	
	</slots>
	<passes>
	
		<!-- Geometry pass, builds the gbuffer -->
		<pass name="geometry" enabled="true">			
			<type>scene</type>
			
			<state>
				<clear-color>true</clear-color>
				<clear-depth>true</clear-depth>
				<depth-test>true</depth-test>
				<viewport>full</viewport>
			</state>
			
			<target>gbuffer</target>
			<shader>gbuffer</shader>
			
			<outputs>
				<output>diffuse</output>
				<output>normal</output>
				<output>material</output>
				<output>position</output> 
				
				<!-- We don't actually use these, we just want them cleared :) -->
				<output>shadow_accumulation</output> 
			</outputs>
		</pass>	

		<!-- Shadow map pass. Renders the scene form the pov of all shadow casters, and fills the shadow accumulation buffer. -->
		<pass name="shadow-mapping" enabled="false">	
			<foreach>shadow_casting_light</foreach>		
			<type>container</type>
			
			<target>gbuffer</target>
			
			<sub-passes>
				
				<!-- Render the shadow map -->
				<pass name="shadow-map" enabled="true">					
					<type>scene</type>

					<target>gbuffer</target>
					<shader>shadow_map</shader>
					
					<state>
						<clear-color>true</clear-color>
						<depth-test>true</depth-test>
					</state>
					
					<outputs>
						<output>shadow_map</output>
					</outputs>
					
					<!-- Actual shadow accumulation passes! -->
					<sub-passes>
						
						<pass name="shadow-map-accumulation" enabled="true">	
							<type>mesh</type>
							<mesh>fullscreen_quad</mesh>

							<target>gbuffer</target>
							<shader>shadow_accumulation</shader>
									
							<state>
								<depth-test>false</depth-test>
							</state>
					
							<outputs>
								<output>shadow_accumulation</output>
							</outputs>
						</pass>
						
					</sub-passes>
					
				</pass>
				
			</sub-passes>
		</pass>	
			
		<!-- Lighting pass, fills the light accumulation buffer based on the gbuffer from the previous step. -->
		<pass name="lighting" enabled="true">	
			<foreach>light</foreach>
			
			<type>container</type>
			<target>gbuffer</target>
			<shader>light</shader>
			
			<state>
				<clear-color>true</clear-color>
				<depth-test>false</depth-test>
				<blend>true</blend>
				<blend-function>one_one</blend-function>
			</state>			
			
			<outputs>
				<output>light_accumulation</output>
			</outputs>
			
			<sub-passes>
				<pass name="light-accumulation" enabled="true">					
					<type>mesh</type>
					<mesh>fullscreen_quad</mesh>
					
					<target>gbuffer</target>
					<shader>light</shader>
					
					<outputs>
						<output>light_accumulation</output>
					</outputs>
				</pass>
			</sub-passes>
		</pass>	
		
		<!-- SSAO pass builds the ambient occlusion buffer. -->
		<pass name="ssao" enabled="true">	
			<type>mesh</type>
			<mesh>fullscreen_quad</mesh>
			
			<target>gbuffer</target>
			<shader>ssao</shader>
			
			<state>
				<depth-test>false</depth-test>
				<blend>false</blend>
			</state>
						
			<outputs>
				<output>ssao</output>
			</outputs>
		</pass>	
		
		<!-- Combine pass, combines all the buffers into our final output. -->
		<pass name="combine" enabled="true">	
			<type>mesh</type>
			<mesh>fullscreen_quad</mesh>
			
			<target></target>
			<shader>combine</shader>
			
			<state>
				<depth-test>true</depth-test>
				<clear-depth>true</clear-depth>
				<viewport>output</viewport>
			</state>
						
			<outputs>
				<output>BACK_BUFFER</output>
			</outputs>
		</pass>	
		
		<!-- Debug visualisation. Draws overlays with extra debugging information. -->
		<pass name="editor-geometry" enabled="false">	
			<type>scene</type>
			
			<state>
				<depth-test>true</depth-test>
				<viewport>output</viewport>
			</state>
						
			<outputs>
				<output>BACK_BUFFER</output>
			</outputs>
		</pass>	
		
	</passes>
</xml>